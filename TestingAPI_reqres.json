{
	"info": {
		"_postman_id": "1d4a6fb0-2e80-4e7e-9baf-de9382a50c6a",
		"name": "RestAPI_reqres",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2903602"
	},
	"item": [
		{
			"name": "Get the list of users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"function valid(email) {\r",
							"    const pattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
							"    return pattern.test(email);\r",
							"}\r",
							"\r",
							"\r",
							"pm.test(\"GetListOfUsers HTTP STATUS should be 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"GetListOfUsers Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"GetListOfUsers HEADER Content-Type should include application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"GetListOfUsers Response checking type\", function () {\r",
							"    \r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.page).to.be.a(\"number\").and.not.null;\r",
							"    pm.expect(jsonData.per_page).to.be.a(\"number\").and.not.null;\r",
							"    pm.expect(jsonData.total).to.be.a(\"number\").and.not.null;\r",
							"    pm.expect(jsonData.total_pages).to.be.a(\"number\").and.not.null;\r",
							"    pm.expect(jsonData.data).to.be.an('array').and.not.null;\r",
							"    pm.expect(jsonData.support).to.be.an('object').and.not.null;\r",
							"\r",
							"    pm.expect(jsonData.support.url).to.be.a('string').and.not.empty; \r",
							"    pm.expect(jsonData.support.text).to.be.a('string').and.not.empty;\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"GetListOfUsers Response data checking type\", function () {\r",
							"    \r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    for(let i = 0; i< jsonData.data.length; i++){\r",
							"\r",
							"        pm.expect(jsonData.data[i].id).to.be.a('number').and.not.null;\r",
							"        pm.expect(jsonData.data[i].email).to.be.a('string').and.not.empty;\r",
							"        pm.expect(valid(jsonData.data[i].email));\r",
							"        pm.expect(jsonData.data[i].first_name).to.be.a('string').and.to.match(/^[A-Za-z]+$/);\r",
							"        pm.expect(jsonData.data[i].last_name).to.be.a('string').and.to.match(/^[A-Za-z]+$/);\r",
							"        pm.expect(jsonData.data[i].avatar).to.be.a('string').and.not.empty;\r",
							"\r",
							"        console.log(jsonData.data[i].email);\r",
							"    }\r",
							"});\r",
							"pm.test(\"GetListOfUsers Response format verification\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');\r",
							"\r",
							"    pm.expect(jsonData.page).to.be.a('number').and.not.null;\r",
							"    pm.expect(jsonData.per_page).to.be.a('number').and.not.null;\r",
							"    pm.expect(jsonData.total).to.be.a('number').and.not.null;\r",
							"    pm.expect(jsonData.total_pages).to.be.a('number').and.not.null;\r",
							"\r",
							"    pm.expect(jsonData.data).to.be.an('array').and.not.null;\r",
							"    \r",
							"    pm.expect(jsonData.support).to.be.an('object').and.not.null;\r",
							"    pm.expect(jsonData.support.url).to.be.a('string').and.not.empty; \r",
							"    pm.expect(jsonData.support.text).to.be.a('string').and.not.empty;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users?page=1",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a specific user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"GetOneUser HTTP STATUS should be 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"GetOneUser HEADER Content-Type should include application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"GetOneUser BODY checking response type\", function () {\r",
							"    \r",
							"    let jsonData = pm.response.json();\r",
							"    //Should not appear\r",
							"    pm.expect(jsonData.page).not.to.be;\r",
							"    pm.expect(jsonData.per_page).not.to.be;\r",
							"    pm.expect(jsonData.total).not.to.be;\r",
							"    pm.expect(jsonData.total_pages).not.to.be;\r",
							"\r",
							"    pm.expect(jsonData.data).to.be.an('object');\r",
							"    pm.expect(jsonData.support).to.be.an('object');\r",
							"\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"GetOneUser BODY data checking response type\", function () {\r",
							"    \r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData.data.id).to.be.an('number');\r",
							"    pm.expect(jsonData.data.email).to.be.an('string');\r",
							"    pm.expect(jsonData.data.first_name).to.be.an('string');\r",
							"    pm.expect(jsonData.data.last_name).to.be.an('string');\r",
							"    pm.expect(jsonData.data.avatar).to.be.an('string');\r",
							"\r",
							"    pm.expect(jsonData.support.url).to.be.an('string');\r",
							"    pm.expect(jsonData.support.text).to.be.an('string');   \r",
							"\r",
							"    \r",
							"\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users/1",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"CreateUser HTTP STATUS should be 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"CreateUser HEADER Content-Type should include application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"CreateUser BODY checking response type\", function () {\r",
							"    \r",
							"    let jsonData = pm.response.json();\r",
							"    //Should not appear\r",
							"    pm.expect(jsonData.name).to.be.a(\"string\").and.not.empty;\r",
							"    pm.expect(jsonData.job).to.be.a(\"string\").and.not.empty;\r",
							"    pm.expect(jsonData.id).to.be.a(\"string\").and.not.empty;\r",
							"    pm.expect(jsonData.createdAt).to.be.a(\"string\").and.not.empty;\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"klajdi\",\r\n    \"job\": \"leader\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"CreateUser HTTP STATUS should be 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"CreateUser HEADER Content-Type should include application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"CreateUser BODY checking response type\", function () {\r",
							"    \r",
							"    let jsonData = pm.response.json();\r",
							"    //Should not appear\r",
							"    pm.expect(jsonData.name).to.be.a(\"string\").and.not.empty;\r",
							"    pm.expect(jsonData.job).to.be.a(\"string\").and.not.empty;\r",
							"    pm.expect(jsonData.updatedAt).to.be.a(\"string\").and.not.empty;\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"leader\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users/2",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"DeleteUser HTTP STATUS should be 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users/2",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		}
	]
}